'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = execute;

var _web_exploit_detector = require('./web_exploit_detector');

var _prompt = require('./prompt');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = _bluebird2.default.promisifyAll(require('graceful-fs')); /* eslint no-console: ["error", {"allow": ["log", "warn", "error"]}] */

var argv = (0, _minimist2.default)(process.argv.slice(2), {
  boolean: true,
  default: { 'results': undefined }
});

function printUsage() {
  console.log('This script processes an existing JSON results file produced by the Web Exploit Detector and generates a list of exceptions (in exceptions.json) based on user input.\n');
  console.log('Usage: node ' + process.argv[1] + ' --results=<results_json>');
  console.log('  --results=<results_json>: path to a JSON results file produced by the Web Exploit Detector.');
}

function loadResults(file) {
  return fs.readFileAsync(file).then(JSON.parse);
}

function saveExceptions(exceptions) {
  return fs.writeFileAsync(_path2.default.join(__dirname, '..', 'exceptions.json'), JSON.stringify(exceptions, null, '\t')).then(function () {
    return console.log('exceptions.json written successfully');
  }).catch(function (err) {
    return console.error('ERROR: unable to write results to exceptions.json: ' + err.toString());
  });
}

function processResults(exceptions, results) {
  var thunks = results.map(function (res) {

    // Thunk to initiate choice gatering for rule
    return function () {
      console.log('RULE: ' + res.rule.name);
      return res.matches.map(function (match) {

        // Thunk to initiate choice gatering for file
        return function (skipRule) {
          return skipRule ? _bluebird2.default.resolve({
            rule_id: res.rule.id,
            file: match,
            exclude: false,
            skip: true
          }) : (0, _prompt.prompt)('  ' + match + '\n  Exclude this file from the rule? [y/N/s]').then(function (response) {
            return {
              rule_id: res.rule.id,
              file: match,
              exclude: response.toUpperCase().slice(0, 1) === 'Y',
              skip: response.toUpperCase().slice(0, 1) === 'S'
            };
          });
        };
      });
    };
  });

  return _bluebird2.default.mapSeries(thunks, function (ruleThunk) {
    var skipRule = false;
    return _bluebird2.default.mapSeries(ruleThunk(), function (fileThunk) {
      return fileThunk(skipRule).then(function (res) {
        if (res.skip) skipRule = true;
        return res;
      });
    }).then(function (res) {
      var temp = {
        rule_id: res.length > 0 ? res[0].rule_id : null,
        files: res.filter(function (x) {
          return x.exclude;
        }).map(function (x) {
          return x.file;
        })
      };
      return temp;
    });
  }).then(function (res) {
    return res

    // Remove rules for which no files were excluded
    .filter(function (x) {
      return x.files.length > 0;
    }).reduce(function (acc, rule) {
      rule.files.forEach(function (f) {
        if (acc[f]) acc[f].push(rule.rule_id);else acc[f] = [rule.rule_id];
      });
      return acc;
    }, {});
  });
}

function execute() {
  console.log('Script to generate exceptions from Web Exploit Detector results ((c) Simon Pugnet 2017)\n');

  if (!argv.results || typeof argv.results === 'boolean') {
    printUsage();
    process.exit(1);
  }

  (0, _web_exploit_detector.loadExceptions)().then(function (exceptions) {
    return loadResults(argv.results).then(function (results) {

      console.log('You will now be asked whether you want to exclude each matched file for each rule.\n\nFor each file, you can answer either "y" to exclude the file for the rule, "n" (default) to keep the file as a candidate for the rule, or "s" to skip the remaining files for the rule. When skipping, all remaining files to check will not be excluded.\nTo end the script prematurely without writing any new exceptions, enter Ctrl-C.\n');

      // Start prompting user
      (0, _prompt.promptStart)();

      return processResults(exceptions, results).then(function (newExceptions) {
        var final = newExceptions;

        // All prompting now complete
        (0, _prompt.promptEnd)();

        // Merge existing exceptions
        Object.keys(exceptions).forEach(function (k) {
          if (final[k]) final[k] = final[k].concat(exceptions[k]);else final[k] = exceptions[k];
        });

        return final;
      })

      // Write final exceptions back to file
      .then(saveExceptions).then(function () {
        return console.log('Script completed');
      });
    }).catch(function (err) {
      (0, _prompt.promptEnd)();
      console.error('ERROR: ' + err.toString());
    });
  });
}