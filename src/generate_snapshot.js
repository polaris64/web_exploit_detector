import {getTreeSnapshot} from './web_exploit_detector';
import Logger from './logger';

import minimist from 'minimist';
import Promise  from 'bluebird';

const fs = Promise.promisifyAll(require('graceful-fs'));

const argv = minimist(
  process.argv.slice(2),
  {
    boolean: true,
    default: {
      'help':    false,
      'output':  undefined,
      'verbose': false,
      'webroot': undefined,
    },
  }
);

const logger = new Logger(argv);

function printUsage() {
  logger.log(3, `Usage: node ${process.argv[1]} --webroot=<web_root> --output=<snapshot_file>`);
  logger.log(3, '  --help: shows this message');
  logger.log(3, '  --output=<snapshot_file>: writes resulting snapshot to <snapshot_file>.');
  logger.log(3, '  --verbose: enables verbose log output.');
  logger.log(3, '  --webroot=<web_root>: sets the base directory that will be scanned recursively to <web_root>.');
}

export default function execute() {
  logger.log(3, 'Directory tree snapshot generator utility ((c) Simon Pugnet 2017)\n');
  logger.log(4, 'This tool generates a snapshot of all files and their content in a directory specified by --webroot and stores the result (the snapshot) in a file specified by --output. This snapshot can later be compared to the current files and contents to produce a report about what has changed since the snapshot was made.');

  if (argv.help)
  {
    printUsage();
    process.exit(0);
  }

  if (!argv.webroot)
  {
    logger.log(1, 'ERROR: --webroot command line argument must be specified\n');
    printUsage();
    process.exit(1);
  }

  if (!(argv.output && typeof argv.output !== 'boolean' && argv.output.toString().length > 0))
  {
    logger.log(1, 'ERROR: --output command line argument must be specified\n');
    printUsage();
    process.exit(1);
  }

  getTreeSnapshot({
    output:  argv.output,
    verbose: argv.verbose,
    webroot: argv.webroot,

    logger:   logger.log,
    relative: true,
  })

    // Output results JSON to file
    .then(res => {
      logger.log(4, `Outputting results to ${argv.output}...`);
      return fs.writeFileAsync(
        argv.output,
        JSON.stringify(
          {
            meta: {
              timestamp: Date.now(),
              webroot:   argv.webroot,
            },
            data: res,
          },
          null,
          '\t'
        )
      )
        .catch(err => {
          logger.log(1, `ERROR: unable to write results to file: ${err.toString()}`);
          return res;
        });
    })

    .then(() => logger.log(3, '\nScript finished'))

    .catch(err => {
      logger.log(1, err.toString());
    });
}
