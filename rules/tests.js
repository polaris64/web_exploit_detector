const Promise = require('bluebird');
const fs      = Promise.promisifyAll(require('graceful-fs'));

module.exports = [
  {
    id: 'P64:test:allfiles_pattern',
    name: 'Test rule: matches files with an "f" character in their path using a basic regex test',
    description: 'This rule is intended for debug purposes only. Matches files with an "f" character in their path using a basic regex to test each file.',
    urls: ['https://www.polaris64.net/blog/cyber-security', 'https://www.google.com/'],
    deprecated: false,
    tags: ['debug'],
    test: /f+/,
  },

  {
    id: 'P64:test:allfiles_callback_simple',
    name: 'Test rule: matches files with an "f" character in their path using a callback test function which returns a Boolean',
    description: 'This rule is intended for debug purposes only. Matches files with an "f" character in their path using a callback test function which returns a Boolean.',
    urls: null,
    deprecated: false,
    tags: ['debug'],
    test: (f) => f.split('').filter(c => c === 'f').length > 0,
  },

  {
    id: 'P64:test:allfiles_callback_promise',
    name: 'Test rule: matches files with an "f" character in their path using a callback test function which returns a Promise',
    description: 'This rule is intended for debug purposes only. Matches files with an "f" character in their path using a callback test function which returns a Promise which resolves to a Boolean.',
    urls: null,
    deprecated: false,
    tags: ['debug'],
    test: (f) => {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve(f.split('').filter(c => c === 'f').length > 0);
        }, (Math.random() * 1000) + 500);
      });
    },
  },

  {
    id: 'P64:test:PHP_scripts_with_dirname',
    name: 'Matches any PHP script that contains the text "dirname"',
    description: 'This rule is intended for debug purposes only. Matches all PHP scripts containing the text "dirname".',
    urls: null,
    deprecated: false,
    tags: ['debug'],
    test: (f) => {
      if (!f.match(/\.php$/i))
        return Promise.resolve(false);
      return fs.readFileAsync(f)
        .then(lines => lines.toString().match(/dirname/i));
    },
  },

  {
    id: 'P64:test:deprecated:PHP_scripts',
    name: 'Deprecated rule: matches all PHP scripts',
    description: 'This rule is intended for debug purposes only. Deprecated rule which matches all PHP scripts.',
    urls: null,
    deprecated: true,
    tags: ['debug'],
    test: /\.php$/i,
  },
];
