module.exports = [
  {
    id: 'P64:general:obfuscation:scripts_with_escaped_ascii',
    name: 'Matches any script containing strings with hexadecimal escape codes for standard ASCII characters',
    description: 'Malicious scripts will often use escape sequences to obfuscate strings. It is rare for a legitimate script to use an escape sequence to encode a standard ASCII character as a hexadecimal reference as this takes four times more space than simply writing the character directly. This rule detects the presence of such obfuscation in script files (ASCII range 0x20..0x7F).',
    urls: null,
    deprecated: false,
    tags: ['suspicion', 'general', 'obfuscation', 'escape-sequences'],
    tests: {
      path: (f) => {
        return !!(
          f.match(/\.(js|aspx?|php)$/i) &&

          // Exclude known SwiftMailer files
          !f.match(/classes\/Swift\/Mime\/Headers\/ParameterizedHeader\.php$/i) &&
          !f.match(/Swift\/Encoder\/Rfc2231EncoderTest\.php$/i)
        )
      },
      content: (content) => {
        // Match if lines contains a sequence of 3 or more escaped standard
        // ASCII characters and no escaped non-standard characters
        return !!(content.match(/(\\x[2-7][0-9A-F]){3,}/i) && !content.match(/(\\x([0-1]|[8-9A-F])[0-9A-F])+/i));
      },
    },
  },

  {
    id: 'P64:general:tags:hacked_by',
    name: 'Matches any script or page containing phrases similar to "hacked by"',
    description: 'Attackers will often leave a "calling card" in a file contents, either as a comment or as a string to be output. This rule looks for many common strings that match this pattern.',
    urls: null,
    deprecated: false,
    tags: ['suspicion', 'general', 'tags', 'hacked_by'],
    tests: {
      path: /(\.aspx?$|\.php$|\.jsx?$|\.html?$)/i,
      content: (content) => {
        return !!(
          (
            content.match(/\bhack\b/i) &&
            content.match(/l33t/i)
          ) ||
          (
            !content.match(/\bhack\b/i) &&
            (
              content.match(/hacked[^a-z0-9\d\s]*\s*by/i) ||
              content.match(/h[a4](ck|x)([o0]r)?([e3]d)?/i) ||
              content.match(/l33t.*h[a4](ck|x)/i) ||
              content.match(/h[a4](ck|x).*l33t/i)
            )
          )
        );
      },
    },
  },
];
